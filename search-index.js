var searchIndex = JSON.parse('{\
"pushgen":{"doc":"Push-style design pattern for processing of ranges and …","t":"NNECCCECNNNCNCNNEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLALLLLLLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLIIIIQIQQQIIILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKKKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLL","n":["Complete","Complete","Either","FromGenerator","Generator","GeneratorExt","GeneratorResult","IntoGenerator","Left","MoreValues","Partial","ReverseGenerator","Right","SliceGenerator","Stop","Stopped","TryReduction","ValueResult","all","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","collect","consume","count","deref","deref_mut","description","either","either_into","either_with","eq","eq","eq","eq","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","fill_buf","find","find_map","flip","flush","fmt","fmt","fmt","fmt","fmt","fold","for_each","from","from","from","from","from","from","from","from_fn","from_iter","generators","hash","into","into","into","into","into","into_future","into_inner","into_iter","into_iter","is_complete","is_left","is_partial","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","map","map_left","map_right","next","next_back","nth","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partition","poll","position","provide","read","read_exact","read_line","read_to_end","read_to_string","read_until","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","run","run_back","seek","size_hint","source","structs","test","to_owned","to_owned","to_owned","to_owned","to_string","traits","try_advance","try_advance_back","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","unwrap_left","unwrap_right","write","write_all","write_fmt","ArrayGenerator","BoxedGenerator","FromFn","FromIter","OptionGen","SliceGenerator","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","drop","from","from","from","from","from","from","from_fn","from_iter","into","into","into","into","into","into","new","new","run","run","run","run","run","run","run_back","run_back","run_back","run_back","to_owned","to_owned","to_owned","to_owned","to_owned","try_advance","try_advance","try_advance_back","try_advance_back","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Chain","Cloned","Copied","Cycle","Dedup","Enumerate","Filter","FilterMap","Flatten","Inspect","IteratorAdaptor","Map","Reverse","Scan","Skip","SkipWhile","StepBy","Take","TakeWhile","Zip","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","next","next_back","run","run","run","run","run","run","run","run","run","run","run","run","run","run","run","run","run","run","run","run_back","run_back","run_back","run_back","run_back","run_back","run_back","run_back","run_back","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_advance","try_advance","try_advance","try_advance","try_advance","try_advance","try_advance","try_advance_back","try_advance_back","try_advance_back","try_advance_back","try_advance_back","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","MultiStoppingGen","StoppingGen","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","from","from","into","into","new","new","run","run","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","DynGenerator","FromGenerator","Generator","GeneratorExt","IntoGen","IntoGenerator","Output","Output","Output","Product","ReverseGenerator","Sum","all","all","any","any","boxed","boxed","by_ref","by_ref","chain","chain","cloned","cloned","cmp","cmp","cmp_by","cmp_by","collect","collect","copied","copied","count","count","cycle","cycle","dedup","dedup","enumerate","enumerate","eq","eq","filter","filter","filter_map","filter_map","find","find","find_map","find_map","flat_map","flat_map","flatten","flatten","fold","fold","for_each","for_each","from_gen","ge","ge","gt","gt","inspect","inspect","into_gen","iter","iter","last","last","le","le","lt","lt","map","map","max","max","max_by","max_by","max_by_key","max_by_key","min","min","min_by","min_by","min_by_key","min_by_key","ne","ne","next","next","next_back","next_back","nth","nth","partial_cmp","partial_cmp","partial_cmp_by","partial_cmp_by","partition","partition","position","position","product","product","product","reduce","reduce","rev","rev","run","run_back","run_dyn","scan","scan","skip","skip","skip_while","skip_while","step_by","step_by","sum","sum","sum","take","take","take_while","take_while","try_advance","try_advance","try_advance_back","try_advance_back","try_fold","try_fold","try_for_each","try_for_each","try_max_by","try_max_by","try_min_by","try_min_by","try_reduce","try_reduce","unzip","unzip","zip","zip"],"q":[[0,"pushgen"],[182,"pushgen::generators"],[264,"pushgen::structs"],[513,"pushgen::test"],[536,"pushgen::traits"]],"d":["Returned from <code>Generator::run</code> when the generator has sent …","The reduction has completed, with the associated result.","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","","","","The result of generator runs.","","A value of type <code>L</code>.","Request more values from a generator.","The reduction is only partially completed. The associated …","","A value of type <code>R</code>.","","Request that a generator stop generating values.","Returned from <code>Generator::run</code> when the generator was …","The result value of a <code>try_*</code> reduction.","Value-consumption result.","","","","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","","","","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Implements various generators.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Extract the value of an either over two equivalent types.","Convert the inner value to an iterator.","","Check if the reduction is complete.","Return true if the value is the <code>Left</code> variant.","Check if the reduction is partial.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","","","","","","","","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","","","Generator adaptor implementations. See <code>GeneratorExt</code> for …","Various test utilities","","","","","","Module containing the various traits used by <code>pushgen</code>.","","","","","","","","","","","","","","","Get the underlying value, no matter if it’s complete or …","Returns the left value","Returns the right value","","","","A generator that generates values from an array.","Box a generator, type-erasing the actual generator type. …","A generator where each iteration calls the provided …","A generator where each iteration delegates to an <code>Iterator</code>","A generator over the value in <code>Some</code> variant of an <code>Option</code>.","A generator that generates values from a slice.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new generator where each iteration calls the …","Creates a generator that wraps an <code>Iterator</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new slice generator.","Create a new slice generator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implements a chained generator. See <code>.chain()</code> for details.","A generator that clones the elements of an underlying …","A generator that copies the elements of an underlying …","Repeates a generator endlessly. See <code>cycle()</code> for details.","Deduplication of duplicate consecutive values. See <code>.dedup()</code>…","A generator that yields the current count and the value …","Implements a filtered generator. See <code>.filter()</code> for more …","Implements a mapped generator. See <code>.map()</code> for details.","Flatten generator implementation. See <code>.flatten()</code> for …","Inspect each value and then pass it on. See <code>inspect()</code> for …","Adapt a generator into an iterator. See <code>.iter()</code> for more …","Implements a mapped generator. See <code>.map()</code> for details.","Reverses a generators direction. See <code>rev()</code> for details.","A generator adaptor that holds internal state and creates …","Skip over a set amount of values. See <code>.skip()</code> for more …","Skip over of values based on a closure. See <code>.skip()</code> for …","Create a stepping generator. See <code>step_by()</code> for details.","Take <code>n</code> values from a generator. See <code>.take()</code> for details.","A generator that only forwards values while the predicate …","Zip two generators. See <code>.zip()</code> for details.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A spuriously stopping generator that can stop multiple …","A spuriously stopping generator that will stop once.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new stopping generator.","Create a new multistopping generator","","","","","","","","","","Sealed trait to enable boxed generators. See <code>.boxed()</code> for …","Conversion from a <code>Generator</code>.","Trait for generating values into a closure.","Provides extension-methods for all generators.","Which kind of generator are we turning this into?","Conversion to a generator.","The output type of this generator.","Data-type generated by the generator.","Data-type generated by the generator.","Trait to represent types that can be created by …","A generator able to produce values from in reverse order.","Trait to represent types that can be created by summing up …","Tests if every value from the generator matches a …","Tests if every value from the generator matches a …","Tests if any value matches a predicate.","Tests if any value matches a predicate.","Box a generator, making it possible to use as return value …","Box a generator, making it possible to use as return value …","Borrows a generator rather than consuming it.","Borrows a generator rather than consuming it.","Creates a generator by chaining two generators, running …","Creates a generator by chaining two generators, running …","Creates a generator that clones all of its elements.","Creates a generator that clones all of its elements.","Lexicographically compares the values of this generator …","Lexicographically compares the values of this generator …","Lexicographically compares the values of this generator …","Lexicographically compares the values of this generator …","Transforms a generator into a collection.","Transforms a generator into a collection.","Creates a generator that copies all of its elements.","Creates a generator that copies all of its elements.","Consumes the generator, counting the number of values …","Consumes the generator, counting the number of values …","Repeats a generator endlessly.","Repeats a generator endlessly.","Create a de-duplicating generator, removing consecutive …","Create a de-duplicating generator, removing consecutive …","Creates a generator which gives the current generation …","Creates a generator which gives the current generation …","Determines if the values from this generator are equal to …","Determines if the values from this generator are equal to …","Create a filtered generator. Only values for which the …","Create a filtered generator. Only values for which the …","Creates a generator that both filters and maps.","Creates a generator that both filters and maps.","Searches for a value that satisifes a predicate.","Searches for a value that satisifes a predicate.","Applies a function to the values and returns the first …","Applies a function to the values and returns the first …","Creates a generator that works like map, but flattens …","Creates a generator that works like map, but flattens …","Creates a generator that flattens nested structure.","Creates a generator that flattens nested structure.","Folds every element into an accumulator by applying an …","Folds every element into an accumulator by applying an …","Run a generator to completion, or until it is stopped, and …","Run a generator to completion, or until it is stopped, and …","Creates a value from a generator.","Determines if the values of this generator are …","Determines if the values of this generator are …","Determines if the values of this generator are …","Determines if the values of this generator are …","Does something with each value from the generator, passing …","Does something with each value from the generator, passing …","Creates a generator from a value.","Create an iterator from a generator.","Create an iterator from a generator.","Exhausts the generator, returning the last element.","Exhausts the generator, returning the last element.","Determines if the values of this generator are …","Determines if the values of this generator are …","Determines if the values of this generator are …","Determines if the values of this generator are …","Takes a closure and creates a generator which  calls the …","Takes a closure and creates a generator which  calls the …","Returns the maximum value of a generator.","Returns the maximum value of a generator.","Returns the value that gives the maximum value when …","Returns the value that gives the maximum value when …","Returns the value that gives the maximum value from the …","Returns the value that gives the maximum value from the …","Returns the minimum value of a generator.","Returns the minimum value of a generator.","Returns the value that gives the minimum value when …","Returns the value that gives the minimum value when …","Returns the value that gives the minimum value from the …","Returns the value that gives the minimum value from the …","Determines if the values from this generator are unequal …","Determines if the values from this generator are unequal …","Retrieve the next value from the generator","Retrieve the next value from the generator","Get an element from the back of the generator.","Get an element from the back of the generator.","Returns the <code>nth</code> value from the generator.","Returns the <code>nth</code> value from the generator.","Lexicographically compares the elements of this generator …","Lexicographically compares the elements of this generator …","Lexicographically compares the elements of this generator …","Lexicographically compares the elements of this generator …","Consumes a generator, creating two collections from it.","Consumes a generator, creating two collections from it.","Searches for a value among the values generated, returning …","Searches for a value among the values generated, returning …","Calculate the product using the given generator.","Multiplies the values of a generator. Takes each value and …","Multiplies the values of a generator. Takes each value and …","Reduces the elements to a single one by repeatedly …","Reduces the elements to a single one by repeatedly …","Reverses a generators direction.","Reverses a generators direction.","Run the generator, emitting values to the <code>output</code> closure.","Run a generator backwards, producing values from the end …","Run the generator using a <code>&amp;mut dyn FnMut</code> instead of …","An adaptor similar to <code>fold</code> that holds internal state and …","An adaptor similar to <code>fold</code> that holds internal state and …","Skips over <code>n</code> values, consuming and ignoring them.","Skips over <code>n</code> values, consuming and ignoring them.","Creates a generator that skips values based on a predicate.","Creates a generator that skips values based on a predicate.","Create a generator that starts at the same point but steps …","Create a generator that starts at the same point but steps …","Calculate the sum from a given generator.","Sums the values of a generator. Takes each value and adds …","Sums the values of a generator. Takes each value and adds …","Takes <code>n</code> values and then completes the generator.","Takes <code>n</code> values and then completes the generator.","Creates a generator that pushes values based on a …","Creates a generator that pushes values based on a …","Try to advance the generator <code>n</code> values, ignoring them.","Try to advance the generator <code>n</code> values, ignoring them.","Tries to advance the generator from the back by <code>n</code> values.","Tries to advance the generator from the back by <code>n</code> values.","Apply a function as long as the return value is …","Apply a function as long as the return value is …","A generator method that applies a fallible function to …","A generator method that applies a fallible function to …","Returns the value that gives the maximum value when …","Returns the value that gives the maximum value when …","Returns the value that gives the minimum value when …","Returns the value that gives the minimum value when …","Reduces the values to a single value by repeatedly …","Reduces the values to a single value by repeatedly …","Converts an iterator of pairs into a pair of containers.","Converts an iterator of pairs into a pair of containers.","Zips the output of two generators into a single generator …","Zips the output of two generators into a single generator …"],"i":[16,17,0,0,0,0,0,0,2,15,17,0,2,0,15,16,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,16,17,2,15,16,17,2,2,15,16,17,2,2,15,16,17,2,15,16,17,2,2,2,2,2,2,2,2,2,2,15,16,17,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,16,17,2,2,2,2,15,15,16,16,17,0,0,0,2,2,2,15,16,17,2,2,2,2,17,2,17,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,16,17,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,15,16,17,2,0,2,2,2,15,16,17,2,15,16,17,2,15,16,17,17,2,2,2,2,2,0,0,0,0,0,0,61,66,62,63,64,65,61,66,62,63,64,65,61,62,63,64,65,61,62,63,64,65,61,61,66,62,63,64,65,0,0,61,66,62,63,64,65,61,65,61,66,62,63,64,65,61,63,64,65,61,62,63,64,65,61,65,61,65,61,66,62,63,64,65,61,66,62,63,64,65,61,66,62,63,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,83,67,84,85,86,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,67,84,85,86,68,69,70,71,72,73,74,75,76,77,78,79,80,81,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,74,82,83,67,84,85,86,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,67,84,85,86,68,69,70,71,72,73,74,75,76,77,78,79,80,81,74,74,74,82,83,67,84,85,86,68,69,70,71,72,73,75,76,77,78,79,80,81,67,84,85,68,69,70,72,73,75,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,85,69,70,75,77,84,85,69,70,75,82,83,67,84,85,86,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,67,84,85,86,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,67,84,85,86,68,69,70,71,72,73,74,75,76,77,78,79,80,81,0,0,89,87,89,87,87,87,89,87,89,87,89,87,89,87,87,89,87,89,87,89,87,0,0,0,0,90,0,94,53,90,0,0,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,91,95,95,95,95,95,95,90,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,92,95,95,95,95,95,95,53,54,94,95,95,95,95,95,95,95,95,93,95,95,95,95,95,95,53,53,54,54,95,95,95,95,95,95,95,95,95,95,95,95,95,95],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1,1]],3],4],[[[2,[1,1]],3],4],[[[2,[[6,[5]],[6,[5]]]]],5],[[[2,[[6,[7]],[6,[7]]]]],7],[[[2,[[6,[8]],[6,[8]]]]],8],[[[2,[6,6]]]],[[[2,[6,6]]]],[[[2,[[6,[9]],[6,[9]]]]],9],[2,2],[[[10,[2]]],[[2,[10,10]]]],[[[10,[2]]],[[2,[10,10]]]],[[[2,[[11,[8]],[11,[8]]]]],8],[[[2,[11,11]]]],[[[2,[[11,[5]],[11,[5]]]]],5],[[[2,[11,11]]]],[2,2],[[[2,[[11,[7]],[11,[7]]]]],7],[[[2,[[11,[9]],[11,[9]]]]],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[12,12]]],[[13,[12]]]],[[[2,[14,14]]],[[2,[14,14]]]],[15,15],[16,16],[[[17,[14]]],[[17,[14]]]],[[[2,[14,14]],[2,[14,14]]]],[[]],[[]],[[]],[[]],[[[2,[18,18]],[2,[18,18]]],19],[[15,15],19],[[16,16],19],[[[17,[18]],[17,[18]]],19],[[[2,[1,1]]],20],[[[2,[21,21]],22]],[[[2,[1,1]]],22],[[[2,[23,23]]]],[[[2,[24,24]]]],[[[2,[12,12]]],9],[[2,25,25]],[[[2,[26,26]]]],[[2,25,25]],[[[2,[[27,[[27,[[27,[27]]]]]],[27,[[27,[[27,[27]]]]]]]],[2,[[27,[[27,[[27,[27]]]]]],[27,[[27,[[27,[27]]]]]]]]],4],[[15,15],4],[[16,16],4],[[[17,[27]],[17,[27]]],4],[[[2,[28]],9]],[[[2,[28]],9]],[[[2,[29,29]],30]],[[[2,[31,31]]],[[31,[2]]]],[2],[[[2,[13,13]]],[[13,[2]]]],[[[2,[31,31]]],[[31,[2]]]],[2],[[[2,[21,21]]],[[31,[32]]]],[[[2,[1,1]],3],13],[[[2,[1,1]],3],13],[2,2],[[[2,[33,33]]],[[31,[32]]]],[[[2,[28,28]],34],[[31,[35]]]],[[[2,[36,36]],34],[[31,[35]]]],[[15,34],37],[[16,34],37],[[[17,[28]],34],37],[[[2,[1,1]],3]],[[[2,[1,1]],3]],[31,2],[[]],[[]],[4,15],[[]],[4,16],[[]],0,0,0,[[[2,[38,38]],39]],[2,31],[[]],[[]],[[]],[[]],[[]],[2],[[[2,[30,30]]],2],[[]],[17,4],[2,4],[17,4],[2,4],[[[2,[1,1]]],13],[2,13],[[2,25],2],[2],[[[2,[40]]],40],[[2,25]],[[[2,[41,41]]],22],[[2,25],2],[[2,25],2],[[2,25],2],[[[2,[1,1]]],13],[[[2,[42,42]]],13],[[[2,[1,1]],22],13],[[[2,[[43,[[43,[[43,[43]]]]]],[43,[[43,[[43,[43]]]]]]]],[2,[[43,[[43,[[43,[43]]]]]],[43,[[43,[[43,[43]]]]]]]]],[[13,[19]]]],[[15,15],[[13,[19]]]],[[16,16],[[13,[19]]]],[[[17,[43]],[17,[43]]],[[13,[19]]]],[[[2,[1,1]],3]],[[[10,[[2,[44,44]]]],45],46],[[[2,[1,1]],3],[[13,[22]]]],[47],[[[2,[48,48]]],[[31,[22,32]]]],[[[2,[48,48]]],[[31,[32]]]],[[[2,[21,21]],49],[[31,[22,32]]]],[[[2,[48,48]],[52,[50,51]]],[[31,[22,32]]]],[[[2,[48,48]],49],[[31,[22,32]]]],[[[2,[21,21]],50,[52,[50,51]]],[[31,[22,32]]]],[[[2,[42,42]],3],13],[[[2,[42,42]],3]],[2,13],[[2,25],2],[2],[[[2,[40]]],40],[[2,25]],[[[2,[53,53]],3],16],[[[2,[54,54]],3],16],[[[2,[55,55]],56],[[31,[57,32]]]],[[[2,[1,1]]]],[[[2,[12,12]]],[[13,[12]]]],0,0,[[]],[[]],[[]],[[]],[[],49],0,[[[2,[53,53]],58]],[[[2,[54,54]],58]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],59],[[],59],[[],59],[[],59],[17],[[[2,[28]]]],[[[2,[28]]]],[[[2,[33,33]]],[[31,[22,32]]]],[[[2,[33,33]]],[[31,[32]]]],[[[2,[33,33]],60],[[31,[32]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[61,[14]]],[[61,[14]]]],[[[62,[14]]],[[62,[14]]]],[[[63,[14]]],[[63,[14]]]],[[[64,[14]]],[[64,[14]]]],[[[65,[14]]],[[65,[14]]]],[[]],[[]],[[]],[[]],[[]],[61],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[62,[3]]]],[30,63],[[]],[[]],[[]],[[]],[[]],[[]],[[],61],[[],65],[[61,3],16],[[66,3],16],[[[62,[3]],3],16],[[[63,[1]],3],16],[[64,3],16],[[65,3],16],[[61,3],16],[[[63,[42]],3],16],[[64,3],16],[[65,3],16],[[]],[[]],[[]],[[]],[[]],[[61,58]],[[65,58]],[[61,58]],[[65,58]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[67,[[0,[53,14]]]]],[[67,[[0,[53,14]]]]]],[[[68,[14,14]]],[[68,[14,14]]]],[[[69,[14]]],[[69,[14]]]],[[[70,[14]]],[[70,[14]]]],[[[71,[[0,[53,14]]]]],[[71,[[0,[53,14]]]]]],[[[72,[14,14]]],[[72,[14,14]]]],[[[73,[14,14]]],[[73,[14,14]]]],[[[74,[[0,[53,14]]]]],[[74,[[0,[53,14]]]]]],[[[75,[14,14]]],[[75,[14,14]]]],[[[76,[14,14,14]]],[[76,[14,14,14]]]],[[[77,[14]]],[[77,[14]]]],[[[78,[14,14]]],[[78,[14,14]]]],[[[79,[14]]],[[79,[14]]]],[[[80,[14,14]]],[[80,[14,14]]]],[[[81,[[0,[53,14]],14]]],[[81,[[0,[53,14]],14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[74,[53]],3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[74,[53]]],13],[[[74,[54]]],13],[[[82,[[0,[14,53]]]],3],16],[[[83,[53]],3],16],[[[67,[53]],3],16],[[[84,[53,3]],3],16],[[[85,[54]],3],16],[[[86,[53]],3],16],[[[68,[53,53]],3],16],[[[69,[53]],3],16],[[[70,[53]],3],16],[[[71,[53]],3],16],[[[72,[53,3]],3],16],[[[73,[53,3]],3],16],[[[75,[53,3]],3],16],[[[76,[53,3]],3],16],[[[77,[53]],3],16],[[[78,[53,3]],3],16],[[[79,[53]],3],16],[[[80,[53,3]],3],16],[[[81,[53,53]],3],16],[[[67,[54]],3],16],[[[84,[54,3]],3],16],[[[85,[54]],3],16],[[[68,[54,54]],3],16],[[[69,[[0,[53,54]]]],3],16],[[[70,[[0,[53,54]]]],3],16],[[[72,[54,3]],3],16],[[[73,[54,3]],3],16],[[[75,[54,3]],3],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[83,[53]],58]],[[[84,[53,3]],58]],[[[85,[54]],58]],[[[69,[53]],58]],[[[70,[53]],58]],[[[75,[53,3]],58]],[[[77,[53]],58]],[[[84,[54,3]],58]],[[[85,[54]],58]],[[[69,[[0,[53,54]]]],58]],[[[70,[[0,[53,54]]]],58]],[[[75,[54,3]],58]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],0,0,[[]],[[]],[[]],[[]],[[[87,[14]]],[[87,[14]]]],[[]],[[]],[[]],[[]],[[]],[88,89],[[],87],[[89,3],16],[[87,3],16],[[]],[[],31],[[],31],[[],31],[[],31],[[],59],[[],59],0,0,0,0,0,0,0,0,0,0,0,0,[3,4],[3,4],[3,4],[3,4],[[],66],[[],66],[[]],[[]],[53,[[68,[53]]]],[53,[[68,[53]]]],[53,[[69,[53]]]],[53,[[69,[53]]]],[90,19],[90,19],[[90,3],19],[[90,3],19],[[],91],[[],91],[53,[[70,[53]]]],[53,[[70,[53]]]],[[],22],[[],22],[14,[[82,[14]]]],[14,[[82,[14]]]],[[],71],[[],71],[[],83],[[],83],[90,4],[90,4],[3,[[72,[3]]]],[3,[[72,[3]]]],[3,[[73,[3]]]],[3,[[73,[3]]]],[3,13],[3,13],[3,13],[3,13],[3,[[67,[[75,[3]]]]]],[3,[[67,[[75,[3]]]]]],[[],67],[[],67],[3],[3],[3,16],[3,16],[90],[90,4],[90,4],[90,4],[90,4],[3,[[84,[3]]]],[3,[[84,[3]]]],[[]],[[],74],[[],74],[[],13],[[],13],[90,4],[90,4],[90,4],[90,4],[3,[[75,[3]]]],[3,[[75,[3]]]],[[],13],[[],13],[3,13],[3,13],[3,13],[3,13],[[],13],[[],13],[3,13],[3,13],[3,13],[3,13],[90,4],[90,4],[[],[[31,[16]]]],[[],[[31,[16]]]],[54,[[31,[16]]]],[54,[[31,[16]]]],[22,13],[22,13],[90,[[13,[19]]]],[90,[[13,[19]]]],[[90,3],[[13,[19]]]],[[90,3],[[13,[19]]]],[3],[3],[3,[[13,[22]]]],[3,[[13,[22]]]],[53],[[],92],[[],92],[3,13],[3,13],[54,[[85,[54]]]],[54,[[85,[54]]]],[3,16],[3,16],[3,16],[3,[[76,[3]]]],[3,[[76,[3]]]],[22,77],[22,77],[3,[[78,[3]]]],[3,[[78,[3]]]],[22,86],[22,86],[53],[[],93],[[],93],[22,79],[22,79],[3,[[80,[3]]]],[3,[[80,[3]]]],[58],[58],[58],[58],[3,[[31,[17]]]],[3,[[31,[17]]]],[3,31],[3,31],[[13,3],[[17,[13]]]],[[13,3],[[17,[13]]]],[[13,3],[[17,[13]]]],[[13,3],[[17,[13]]]],[[13,3],[[17,[13]]]],[[13,3],[[17,[13]]]],[53],[53],[53,[[81,[53]]]],[53,[[81,[53]]]]],"c":[],"p":[[8,"Iterator"],[4,"Either"],[8,"FnMut"],[15,"bool"],[3,"Path"],[8,"AsMut"],[3,"CStr"],[3,"OsStr"],[15,"str"],[3,"Pin"],[8,"AsRef"],[8,"Error"],[4,"Option"],[8,"Clone"],[4,"ValueResult"],[4,"GeneratorResult"],[4,"TryReduction"],[8,"Ord"],[4,"Ordering"],[8,"FromIterator"],[8,"BufRead"],[15,"usize"],[8,"Deref"],[8,"DerefMut"],[8,"FnOnce"],[8,"Into"],[8,"PartialEq"],[8,"Debug"],[8,"Extend"],[8,"IntoIterator"],[4,"Result"],[3,"Error"],[8,"Write"],[3,"Formatter"],[3,"Error"],[8,"Display"],[6,"Result"],[8,"Hash"],[8,"Hasher"],[8,"Default"],[8,"ExactSizeIterator"],[8,"DoubleEndedIterator"],[8,"PartialOrd"],[8,"Future"],[3,"Context"],[4,"Poll"],[3,"Demand"],[8,"Read"],[3,"String"],[15,"u8"],[3,"Global"],[3,"Vec"],[8,"Generator"],[8,"ReverseGenerator"],[8,"Seek"],[4,"SeekFrom"],[15,"u64"],[3,"NonZeroUsize"],[3,"TypeId"],[3,"Arguments"],[3,"ArrayGenerator"],[3,"FromFn"],[3,"FromIter"],[3,"OptionGen"],[3,"SliceGenerator"],[3,"BoxedGenerator"],[3,"Flatten"],[3,"Chain"],[3,"Cloned"],[3,"Copied"],[3,"Dedup"],[3,"Filter"],[3,"FilterMap"],[3,"IteratorAdaptor"],[3,"Map"],[3,"Scan"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Zip"],[3,"Cycle"],[3,"Enumerate"],[3,"Inspect"],[3,"Reverse"],[3,"StepBy"],[3,"MultiStoppingGen"],[15,"i32"],[3,"StoppingGen"],[8,"IntoGenerator"],[8,"FromGenerator"],[8,"Product"],[8,"Sum"],[8,"DynGenerator"],[8,"GeneratorExt"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
