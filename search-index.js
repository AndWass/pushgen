var searchIndex = JSON.parse('{\
"pushgen":{"doc":"Push-style design pattern for processing of ranges and …","t":[3,13,8,4,8,8,4,16,8,13,13,16,16,16,13,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BoxedGenerator","Complete","DynGenerator","Either","Generator","GeneratorExt","GeneratorResult","IntoGen","IntoGenerator","Left","MoreValues","Output","Output","Output","Right","SliceGenerator","Stop","Stopped","ValueResult","all","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","boxed","chain","chain","clone","clone","clone","clone_into","clone_into","clone_into","cloned","cloned","cmp","cmp","cmp","collect","copied","copied","count","dedup","dedup","deref","deref_mut","either","either_with","eq","eq","eq","expect_left","expect_right","extend","factor_first","factor_second","filter","filter","filter_map","filter_map","flat_map","flat_map","flatten","flatten","flip","fmt","fmt","fmt","fmt","fold","for_each","for_each","from","from","from","from","from","from","from","from","from_fn","from_iter","hash","into","into","into","into","into","into","into_gen","into_inner","into_iter","into_iter","is_left","is_right","iter","iter","last","last","last","left","left_and_then","left_or","left_or_default","left_or_else","map","map","map","map_left","map_right","ne","new","next","next_back","nth","partial_cmp","partial_cmp","partial_cmp","right","right_and_then","right_or","right_or_default","right_or_else","run","run","run","run","run_dyn","size_hint","skip","skip","skip_while","skip_while","structs","take","take","take_while","take_while","to_owned","to_owned","to_owned","to_string","try_for_each","try_for_each","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrap_left","unwrap_right","zip","zip","Chain","Cloned","Copied","Dedup","Filter","FilterMap","Flatten","FromFn","FromIter","IteratorAdaptor","Map","OptionGen","Skip","SkipWhile","Take","TakeWhile","Zip","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","new","new","new","new","next","run","run","run","run","run","run","run","run","run","run","run","run","run","run","run","run","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["pushgenpushgen::structsd":["Box a generator, type-erasing the actual generator type. …","Returned from <code>Generator::run</code> when the generator has sent …","Sealed trait to enable boxed generators. See <code>.boxed()</code> for …","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Trait for generating values into a closure.","Provides extension-methods for all generators.","The result of generator runs.","Which kind of generator are we turning this into?","","A value of type <code>L</code>.","Request more values from a generator.","The output type of this generator.","Data-type generated by the generator.","Data-type generated by the generator.","A value of type <code>R</code>.","A generator that generates values from a slice.","Request that a generator stop generating values.","Returned from <code>Generator::run</code> when the generator was …","Value-consumption result.","","","","","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.","","","","","","","","","","","","","","Box a generator, making it possible to use as return …","Box a generator, making it possible to use as return …","Creates a generator by chaining two generators, running …","Creates a generator by chaining two generators, running …","","","","","","","Creates a generator that clones all of its elements.","Creates a generator that clones all of its elements.","","","","","Creates a generator that copies all of its elements.","Creates a generator that copies all of its elements.","","Create a de-duplicating generator, removing consecutive …","Create a de-duplicating generator, removing consecutive …","","","Apply one of two functions depending on contents, …","Like <code>either</code>, but provide some context to whichever of the …","","","","Returns the left value","Returns the right value","","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","Create a filtered generator. Only values for which the …","Create a filtered generator. Only values for which the …","Creates a generator that both filters and maps.","Creates a generator that both filters and maps.","Creates a generator that works like map, but flattens …","Creates a generator that works like map, but flattens …","Creates a generator that flattens nested structure.","Creates a generator that flattens nested structure.","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.","","","","","","Run a generator to completion, or until it is stopped, …","Run a generator to completion, or until it is stopped, …","","","","","","","","","Creates a new generator where each iteration calls the …","Creates a generator that wraps an <code>Iterator</code>.","","","","","","","","Creates a generator from a value.","Extract the value of an either over two equivalent types.","Convert the inner value to an iterator.","","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","Create an iterator from a generator.","Create an iterator from a generator.","Exhausts the generator, returning the last element.","Exhausts the generator, returning the last element.","","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Takes a closure and creates a generator which  calls the …","Takes a closure and creates a generator which  calls the …","Map <code>f</code> over the contained value and return the result in …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","Run the generator, emitting values to the <code>output</code> closure. …","","","","Run the generator using a <code>&mut dyn FnMut</code> instead of …","","Skips over <code>n</code> values, consuming and ignoring them.","Skips over <code>n</code> values, consuming and ignoring them.","Creates a generator that skips values based on a …","Creates a generator that skips values based on a …","Generator adaptor implementations. See <code>GeneratorExt</code> for …","Takes <code>n</code> values and then completes the generator.","Takes <code>n</code> values and then completes the generator.","Creates a generator that pushes values based on a …","Creates a generator that pushes values based on a …","","","","","A generator method that applies a fallible function to …","A generator method that applies a fallible function to …","","","","","","","","","","","","","","","","Returns the left value","Returns the right value","Zips the output of two generators into a single generator …","Zips the output of two generators into a single generator …","Implements a chained generator. See <code>.chain()</code> for details.","A generator that clones the elements of an underlying …","A generator that copies the elements of an underlying …","Deduplication of duplicate consecutive values. See …","Implements a filtered generator. See <code>.filter()</code> for more …","Implements a mapped generator. See <code>.map()</code> for details.","Flatten generator implementation. See <code>.flatten()</code> for …","A generator where each iteration calls the provided …","A generator where each iteration delegates to an <code>Iterator</code>","Adapt a generator into an iterator. See <code>.iter()</code> for more …","Implements a mapped generator. See <code>.map()</code> for details.","A generator over the value in [<code>Some</code>] variant of an [<code>Option</code>…","Skip over a set amount of values. See <code>.skip()</code> for more …","","Take <code>n</code> values from a generator. See <code>.take()</code> for details.","A generator that only forwards values while the predicate …","Zip two generators. See <code>.zip()</code> for details.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,0,0,0,2,0,3,4,5,2,6,3,0,4,1,0,3,3,3,3,3,3,3,3,3,7,8,4,1,3,7,8,4,1,3,9,9,9,9,4,1,3,4,1,3,9,9,4,1,3,3,9,9,3,9,9,3,3,3,3,4,1,3,3,3,3,3,3,9,9,9,9,9,9,9,9,3,4,1,3,3,3,9,9,7,8,4,4,1,1,3,3,0,0,3,7,8,4,1,3,3,2,3,3,3,3,3,9,9,9,9,3,3,3,3,3,3,9,9,3,3,3,3,8,3,3,3,4,1,3,3,3,3,3,3,6,7,8,3,5,3,9,9,9,9,0,9,9,9,9,4,1,3,3,9,9,7,8,4,1,3,7,8,4,1,3,7,8,4,1,3,3,3,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,24,25,26,24,25,26,17,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,17,15,17,18,21,17,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,24,25,26,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["str",15]],[[]],[[]],[[],["either",4]],[[],["either",4]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["boxedgenerator",3]],[[],["boxedgenerator",3]],[[],["chain",3]],[[],["chain",3]],[[],["valueresult",4]],[[],["generatorresult",4]],[[],["either",4]],[[]],[[]],[[]],[[],["cloned",3]],[[],["cloned",3]],[[["valueresult",4]],["ordering",4]],[[["generatorresult",4]],["ordering",4]],[[["either",4]],["ordering",4]],[[]],[[],["copied",3]],[[],["copied",3]],[[],["usize",15]],[[],["dedup",3]],[[],["dedup",3]],[[]],[[]],[[]],[[]],[[["valueresult",4]],["bool",15]],[[["generatorresult",4]],["bool",15]],[[["either",4]],["bool",15]],[[["str",15]]],[[["str",15]]],[[]],[[]],[[]],[[],["filter",3]],[[],["filter",3]],[[],["filtermap",3]],[[],["filtermap",3]],[[],[["map",3],["flatten",3]]],[[],[["map",3],["flatten",3]]],[[],["flatten",3]],[[],["flatten",3]],[[],["either",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[]],[[]],[[["bool",15]]],[[]],[[]],[[["bool",15]]],[[]],[[["result",4]],["either",4]],[[],["fromfn",3]],[[["intoiterator",8]],["fromiter",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["either",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["iteratoradaptor",3]],[[],["iteratoradaptor",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[],["map",3]],[[],["map",3]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[["either",4]],["bool",15]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["valueresult",4]],[["option",4],["ordering",4]]],[[["generatorresult",4]],[["option",4],["ordering",4]]],[[["either",4]],[["option",4],["ordering",4]]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[["fnmut",8]],["generatorresult",4]],[[]],[[["usize",15]],["skip",3]],[[["usize",15]],["skip",3]],[[],["skipwhile",3]],[[],["skipwhile",3]],null,[[["usize",15]],["take",3]],[[["usize",15]],["take",3]],[[],["takewhile",3]],[[],["takewhile",3]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],["zip",3]],[[],["zip",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fromfn",3]],[[],["fromiter",3]],[[],["optiongen",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["option",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[],["generatorresult",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"GeneratorResult"],[8,"IntoGenerator"],[4,"Either"],[4,"ValueResult"],[8,"DynGenerator"],[8,"Generator"],[3,"BoxedGenerator"],[3,"SliceGenerator"],[8,"GeneratorExt"],[3,"Chain"],[3,"Cloned"],[3,"Copied"],[3,"Dedup"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"IteratorAdaptor"],[3,"Map"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Zip"],[3,"FromFn"],[3,"FromIter"],[3,"OptionGen"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};