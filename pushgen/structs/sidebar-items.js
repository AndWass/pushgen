initSidebarItems({"struct":[["Chain","Implements a chained generator. See `.chain()` for details."],["Cloned","A generator that clones the elements of an underlying generator. See `.cloned() for details"],["Copied","A generator that copies the elements of an underlying generator. See `.copied()` for details."],["Dedup","Deduplication of duplicate consecutive values. See `.dedup()` for details."],["Filter","Implements a filtered generator. See `.filter()` for more details."],["FilterMap","Implements a mapped generator. See `.map()` for details."],["Flatten","Flatten generator implementation. See `.flatten()` for details."],["FromFn","A generator where each iteration calls the provided closure `F: FnMut() -> Option<T>`."],["FromIter","A generator where each iteration delegates to an `Iterator`"],["IteratorAdaptor","Adapt a generator into an iterator. See `.iter()` for more info."],["Map","Implements a mapped generator. See `.map()` for details."],["OptionGen","A generator over the value in [`Some`] variant of an [`Option`]."],["Skip","Skip over a set amount of values. See `.skip()` for more details."],["SkipWhile",""],["Take","Take `n` values from a generator. See `.take()` for details."],["TakeWhile","A generator that only forwards values while the predicate returns `true`. See `.take_while()` for details."],["Zip","Zip two generators. See `.zip()` for details."]]});