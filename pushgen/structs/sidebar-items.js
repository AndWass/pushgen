initSidebarItems({"struct":[["Chain","Implements a chained generator. See `.chain()` for details."],["Cloned","A generator that clones the elements of an underlying generator. See `.cloned() for details"],["Copied","A generator that copies the elements of an underlying generator. See `.copied()` for details."],["Cycle","Repeates a generator endlessly. See `cycle()` for details."],["Dedup","Deduplication of duplicate consecutive values. See `.dedup()` for details."],["Enumerate","A generator that yields the current count and the value when run. See `enumerate()` for details."],["Filter","Implements a filtered generator. See `.filter()` for more details."],["FilterMap","Implements a mapped generator. See `.map()` for details."],["Flatten","Flatten generator implementation. See `.flatten()` for details."],["Inspect","Inspect each value and then pass it on. See `inspect()` for details."],["IteratorAdaptor","Adapt a generator into an iterator. See `.iter()` for more info."],["Map","Implements a mapped generator. See `.map()` for details."],["Reverse","Reverses a generators direction. See `rev()` for details."],["Scan","A generator adaptor that holds internal state and creates a new generator. See `scan()` for details."],["Skip","Skip over a set amount of values. See `.skip()` for more details."],["SkipWhile","Skip over of values based on a closure. See `.skip()` for more details."],["StepBy","Create a stepping generator. See `step_by()` for details."],["Take","Take `n` values from a generator. See `.take()` for details."],["TakeWhile","A generator that only forwards values while the predicate returns `true`. See `.take_while()` for details."],["Zip","Zip two generators. See `.zip()` for details."]]});